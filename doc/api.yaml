openapi: 3.0.0
paths:
  /:
    get:
      operationId: AppController_getHello
      parameters: []
      responses:
        '200':
          description: ''
      tags:
        - Application
  /auth/signup:
    post:
      operationId: AuthController_signUp
      summary: Signup a user
      description: Signup a user
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAuthUserDto'
      responses:
        '201':
          description: The user has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request, body does not contain required fields
        '409':
          description: Registration failed, user with such login exist, credentials taken
      tags:
        - Signup
  /auth/login:
    post:
      operationId: AuthController_signIn
      summary: Login user
      description: Logins a user and returns a JWT-token
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAuthUserDto'
      responses:
        '200':
          description: The user has been logged.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Auth'
        '400':
          description: Bad request, body does not contain required fields
        '403':
          description: >-
            Authentication failed, no user with such login, password doesn't
            match actual one, etc.
      tags:
        - Login
  /auth/refresh:
    post:
      operationId: AuthController_refreshTokens
      summary: New pair of Access token and Refresh token
      description: Get new pair of Access token and Refresh token
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAuthUserDto'
      responses:
        '200':
          description: New pair of Access token and Refresh token created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Auth'
        '401':
          description: >-
            Bad request, body does not contain required fields, no refreshToken
            in body
        '403':
          description: Authentication failed, Refresh token is invalid or expired
      security:
        - bearer: []
      tags:
        - Refresh token
  /user:
    post:
      operationId: UserController_create
      summary: Create user
      description: Create a new user
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        '201':
          description: The user has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request, body does not contain required fields
        '401':
          description: Access token is missing or invalid
      tags: &ref_0
        - User
      security: &ref_1
        - bearer: []
    get:
      operationId: UserController_findAll
      summary: Get all users
      description: Get all users
      parameters: []
      responses:
        '200':
          description: The resources were returned successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Access token is missing or invalid
      tags: *ref_0
      security: *ref_1
  /user/{id}:
    get:
      operationId: UserController_findOne
      summary: Get single user by id
      description: Get single user by id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            format: uuid
            type: string
      responses:
        '200':
          description: The resource was returned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request, user "id" is invalid (not uuid)
        '401':
          description: Access token is missing or invalid
        '404':
          description: User not found
      tags: *ref_0
      security: *ref_1
    put:
      operationId: UserController_update
      summary: Update a user's password
      description: Updates a user's password by ID
      parameters:
        - name: id
          required: true
          in: path
          schema:
            format: uuid
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserDto'
      responses:
        '200':
          description: The user has been updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request, user "id" is invalid (not uuid)
        '401':
          description: Access token is missing or invalid
        '403':
          description: User oldPassword is wrong
        '404':
          description: User not found
      tags: *ref_0
      security: *ref_1
    delete:
      operationId: UserController_remove
      summary: Delete user
      description: Deletes user by ID.
      parameters:
        - name: id
          required: true
          in: path
          schema:
            format: uuid
            type: string
      responses:
        '204':
          description: Deleted user successfully
        '400':
          description: Bad Request, user "id" is invalid (not uuid)
        '401':
          description: Access token is missing or invalid
        '404':
          description: User not found
      tags: *ref_0
      security: *ref_1
  /album:
    post:
      operationId: AlbumController_create
      summary: Add new album
      description: Add new album information
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAlbumDto'
      responses:
        '201':
          description: Album is created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        '400':
          description: Bad request, body does not contain required fields
      tags: &ref_2
        - Album
      security: &ref_3
        - bearer: []
    get:
      operationId: AlbumController_findAll
      summary: Get albums list
      description: Gets all library alibums list
      parameters: []
      responses:
        '200':
          description: The resources were returned successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Album'
        '401':
          description: Access token is missing or invalid
      tags: *ref_2
      security: *ref_3
  /album/{id}:
    get:
      operationId: AlbumController_findOne
      summary: Get single album by id
      description: Gets single album by id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            format: uuid
            type: string
      responses:
        '200':
          description: The album was returned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        '400':
          description: Bad Request, album "id" is invalid (not uuid)
        '401':
          description: Access token is missing or invalid
        '404':
          description: Album was not found
      tags: *ref_2
      security: *ref_3
    put:
      operationId: AlbumController_update
      summary: Update album information
      description: Update library album information by UUID
      parameters:
        - name: id
          required: true
          in: path
          schema:
            format: uuid
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAlbumDto'
      responses:
        '200':
          description: The album has been updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        '400':
          description: Bad Request, album "id" is invalid (not uuid)
        '401':
          description: Access token is missing or invalid
        '404':
          description: Album was not found
      tags: *ref_2
      security: *ref_3
    delete:
      operationId: AlbumController_remove
      summary: Delete album
      description: Delete album from library
      parameters:
        - name: id
          required: true
          in: path
          schema:
            format: uuid
            type: string
      responses:
        '204':
          description: Deleted album successfully
        '400':
          description: Bad Request, album "id" is invalid (not uuid)
        '401':
          description: Access token is missing or invalid
        '404':
          description: Album was not found
      tags: *ref_2
      security: *ref_3
  /artist:
    post:
      operationId: ArtistController_create
      summary: Add new artist
      description: Add new artist information
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateArtistDto'
      responses:
        '201':
          description: Created artist successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        '400':
          description: Bad request, body does not contain required fields
        '401':
          description: Access token is missing or invalid
      tags: &ref_4
        - Artist
      security: &ref_5
        - bearer: []
    get:
      operationId: ArtistController_findAll
      summary: Get all artists
      description: Gets all artists
      parameters: []
      responses:
        '200':
          description: The artists were returned successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Artist'
        '401':
          description: Access token is missing or invalid
      tags: *ref_4
      security: *ref_5
  /artist/{id}:
    get:
      operationId: ArtistController_findOne
      summary: Get single artist by id
      description: Get single artist by id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            format: uuid
            type: string
      responses:
        '200':
          description: The artist was returned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        '400':
          description: Bad Request, artist "id" is invalid (not uuid)
        '401':
          description: Access token is missing or invalid
        '404':
          description: Artist was not found
      tags: *ref_4
      security: *ref_5
    put:
      operationId: ArtistController_update
      summary: Update artist information
      description: Update artist information by UUID
      parameters:
        - name: id
          required: true
          in: path
          schema:
            format: uuid
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateArtistDto'
      responses:
        '200':
          description: The artist has been updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        '400':
          description: Bad Request, artist "id" is invalid (not uuid)
        '401':
          description: Access token is missing or invalid
        '404':
          description: Artist was not found
      tags: *ref_4
      security: *ref_5
    delete:
      operationId: ArtistController_remove
      summary: Delete artist
      description: Delete artist from library
      parameters:
        - name: id
          required: true
          in: path
          schema:
            format: uuid
            type: string
      responses:
        '204':
          description: Deleted artist successfully
        '400':
          description: Bad Request, artist "id" is invalid (not uuid)
        '401':
          description: Access token is missing or invalid
        '404':
          description: Artist was not found
      tags: *ref_4
      security: *ref_5
  /track:
    post:
      operationId: TrackController_create
      summary: Add new track
      description: Add new track information
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTrackDto'
      responses:
        '201':
          description: Created track successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        '400':
          description: Bad request, body does not contain required fields
        '401':
          description: Access token is missing or invalid
      tags: &ref_6
        - Track
      security: &ref_7
        - bearer: []
    get:
      operationId: TrackController_findAll
      summary: Get tracks list
      description: Gets all library tracks list
      parameters: []
      responses:
        '200':
          description: The tracks were returned successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Track'
      tags: *ref_6
      security: *ref_7
  /track/{id}:
    get:
      operationId: TrackController_findOne
      summary: Get single track by id
      description: Gets single track by id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            format: uuid
            type: string
      responses:
        '200':
          description: The track was returned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        '400':
          description: Bad Request, track "id" is invalid (not uuid)
        '401':
          description: Access token is missing or invalid
        '404':
          description: Track was not found
      tags: *ref_6
      security: *ref_7
    put:
      operationId: TrackController_update
      summary: Update track information
      description: Update library track information by UUID
      parameters:
        - name: id
          required: true
          in: path
          schema:
            format: uuid
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTrackDto'
      responses:
        '200':
          description: The track has been updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        '400':
          description: Bad Request, track "id" is invalid (not uuid)
        '401':
          description: Access token is missing or invalid
        '404':
          description: Track was not found
      tags: *ref_6
      security: *ref_7
    delete:
      operationId: TrackController_remove
      summary: Delete track
      description: Delete track from library
      parameters:
        - name: id
          required: true
          in: path
          schema:
            format: uuid
            type: string
      responses:
        '204':
          description: Deleted track successfully
        '400':
          description: Bad Request, track "id" is invalid (not uuid)
        '401':
          description: Access token is missing or invalid
        '404':
          description: Track was not found
      tags: *ref_6
      security: *ref_7
  /favs:
    get:
      operationId: FavsController_findAll
      summary: Get all favorites
      description: Gets all favorites artists, tracks and albums
      parameters: []
      responses:
        '200':
          description: The favorites were returned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoritesEntity'
        '401':
          description: Access token is missing or invalid
      tags: &ref_8
        - Favorites
      security: &ref_9
        - bearer: []
  /favs/track/{id}:
    post:
      operationId: FavsController_createTrack
      summary: Add track to the favorites
      description: Add track to the favorites
      parameters:
        - name: id
          required: true
          in: path
          schema:
            format: uuid
            type: string
      responses:
        '201':
          description: Added track "id" to the favorites
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateResponseDto'
        '400':
          description: Bad Request, track "id" is invalid (not uuid)
        '401':
          description: Access token is missing or invalid
        '422':
          description: Track with id doesn't exist
      tags: *ref_8
      security: *ref_9
    delete:
      operationId: FavsController_removeTrack
      summary: Delete track from favorites
      description: ' Delete track from favorites'
      parameters:
        - name: id
          required: true
          in: path
          schema:
            format: uuid
            type: string
      responses:
        '204':
          description: Deleted track successfully
        '400':
          description: Bad Request, track "id" is invalid (not uuid)
        '401':
          description: Access token is missing or invalid
        '404':
          description: Track was not found
      tags: *ref_8
      security: *ref_9
  /favs/album/{id}:
    post:
      operationId: FavsController_createAlbum
      summary: Add album to the favorites
      description: Add album to the favorites
      parameters:
        - name: id
          required: true
          in: path
          schema:
            format: uuid
            type: string
      responses:
        '201':
          description: Added album "id" to the favorites
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateResponseDto'
        '400':
          description: Bad Request, album "id" is invalid (not uuid)
        '401':
          description: Access token is missing or invalid
        '422':
          description: Album with id doesn't exist
      tags: *ref_8
      security: *ref_9
    delete:
      operationId: FavsController_removeAlbum
      summary: Delete album from favorites
      description: Delete album from favorites
      parameters:
        - name: id
          required: true
          in: path
          schema:
            format: uuid
            type: string
      responses:
        '204':
          description: Deleted album successfully
        '400':
          description: Bad Request, album "id" is invalid (not uuid)
        '401':
          description: Access token is missing or invalid
        '404':
          description: Album was not found
      tags: *ref_8
      security: *ref_9
  /favs/artist/{id}:
    post:
      operationId: FavsController_createArtist
      summary: Add artist to the favorites
      description: Add artist to the favorites
      parameters:
        - name: id
          required: true
          in: path
          schema:
            format: uuid
            type: string
      responses:
        '201':
          description: Added artist "id" to the favorites
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateResponseDto'
        '400':
          description: Bad Request, artist "id" is invalid (not uuid)
        '401':
          description: Access token is missing or invalid
        '422':
          description: Artist with id doesn't exist
      tags: *ref_8
      security: *ref_9
    delete:
      operationId: FavsController_removeArtist
      summary: Delete artist from favorites
      description: Delete artist from favorites
      parameters:
        - name: id
          required: true
          in: path
          schema:
            format: uuid
            type: string
      responses:
        '204':
          description: Deleted artist successfully
        '400':
          description: Bad Request, artist "id" is invalid (not uuid)
        '401':
          description: Access token is missing or invalid
        '404':
          description: Artist was not found
      tags: *ref_8
      security: *ref_9
info:
  title: Home Library Service
  description: HLS API with CRUD functionality
  version: '1.0'
  contact: {}
tags: []
servers:
  - url: http://localhost:4000
components:
  securitySchemes:
    bearer:
      scheme: bearer
      bearerFormat: JWT
      type: http
  schemas:
    CreateAuthUserDto:
      type: object
      properties:
        login:
          type: string
          description: The user's login
        password:
          type: string
          format: password
          description: The user's password
      required:
        - login
        - password
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        login:
          type: string
          example: TestUser
        version:
          type: integer
          example: 1
        createdAt:
          type: number
          example: 1655000000
        updatedAt:
          type: number
          example: 1655000000
      required:
        - id
        - login
        - version
        - createdAt
        - updatedAt
    Auth:
      type: object
      properties:
        accessToken:
          type: string
          description: JWT Access Token
        refreshToken:
          type: string
          description: JWT Refresh Token
      required:
        - accessToken
        - refreshToken
    UpdateAuthUserDto:
      type: object
      properties:
        refreshToken:
          type: string
      required:
        - refreshToken
    CreateUserDto:
      type: object
      properties:
        login:
          type: string
          description: The user's login
        password:
          type: string
          format: password
          description: The user's password
      required:
        - login
        - password
    UpdateUserDto:
      type: object
      properties:
        oldPassword:
          type: string
          description: The user's old password
        newPassword:
          type: string
          description: The user's new password
      required:
        - oldPassword
        - newPassword
    CreateAlbumDto:
      type: object
      properties:
        name:
          type: string
          example: Innuendo
        year:
          type: integer
          example: 1991
        artistId:
          type: string
          format: uuid
          nullable: true
      required:
        - name
        - year
        - artistId
    Album:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: Innuendo
        year:
          type: integer
          example: 1991
        artistId:
          type: string
          nullable: true
          format: uuid
      required:
        - id
        - name
        - year
        - artistId
    UpdateAlbumDto:
      type: object
      properties:
        name:
          type: string
          example: Innuendo
        year:
          type: integer
          example: 1991
        artistId:
          type: string
          format: uuid
          nullable: true
      required:
        - name
        - year
        - artistId
    CreateArtistDto:
      type: object
      properties:
        name:
          type: string
          example: Freddie Mercury
        grammy:
          type: boolean
          example: false
      required:
        - name
        - grammy
    Artist:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: Freddie Mercury
        grammy:
          type: boolean
          example: false
      required:
        - id
        - name
        - grammy
    UpdateArtistDto:
      type: object
      properties:
        name:
          type: string
          example: Freddie Mercury
        grammy:
          type: boolean
          example: false
      required:
        - name
        - grammy
    CreateTrackDto:
      type: object
      properties:
        name:
          type: string
          example: Bohemian Rhapsody
        artistId:
          type: string
          format: uuid
          nullable: true
        albumId:
          type: string
          format: uuid
          nullable: true
        duration:
          type: integer
          description: In seconds
      required:
        - name
        - artistId
        - albumId
        - duration
    Track:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: The Show Must Go On
        artistId:
          type: string
          nullable: true
          format: uuid
        albumId:
          type: string
          nullable: true
          format: uuid
        duration:
          type: integer
          description: In seconds
          example: 262
      required:
        - id
        - name
        - artistId
        - albumId
        - duration
    UpdateTrackDto:
      type: object
      properties:
        name:
          type: string
          example: Bohemian Rhapsody
        artistId:
          type: string
          format: uuid
          nullable: true
        albumId:
          type: string
          format: uuid
          nullable: true
        duration:
          type: integer
          description: In seconds
          example: 355
      required:
        - name
        - artistId
        - albumId
        - duration
    FavoritesEntity:
      type: object
      properties:
        artists:
          type: array
          items:
            $ref: '#/components/schemas/Artist'
        albums:
          type: array
          items:
            $ref: '#/components/schemas/Album'
        tracks:
          type: array
          items:
            $ref: '#/components/schemas/Track'
      required:
        - artists
        - albums
        - tracks
    CreateResponseDto:
      type: object
      properties:
        message:
          type: string
      required:
        - message
